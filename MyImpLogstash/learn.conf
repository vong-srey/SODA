#for detail of the patterns, please find them in logstash/patterns/grok-patterns or logstash/patterns/soda-patterns

input { stdin { } }

input { file { path => ["/home/adminuser/Desktop/SODA-exe/Logs/*/*"] } }

filter {


	grok { 



		# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
		# # # #                        Patterns for System Logs                 # # # # 
		# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

		# write the biggest number of data on the top

		# Process log pattern
		match => [ "message", "%{SODADATE:logtime} %{DEVICE_NAME:dev} %{NUMBER:PID:int} %{USERNAME:UsrName} %{USERNAME:OwnrGrp} %{STARTTIME:Start} %{NUMBER:CpuSysTime:int} %{NUMBER:CpuUsrTime:int} %{NUMBER:CpuUsg:float} %{WORD:State} %{NUMBER:NumActiveThreads:int} %{NUMBER:Priority:int} %{NUMBER:Nice:int} %{NUMBER:SharedMem:int} %{NUMBER:RssMem:int} %{NUMBER:VirtualMem:int} %{NUMBER:NonIOpgFaults:int} %{NUMBER:IOpgFaults:int} %{NUMBER:TotalPgFaults:int}"]

		# network log pattern
		match => [ "message", "%{SODADATE:logtime} %{DEVICE_NAME:dev} %{NUMBER:ActConOpn:int} %{NUMBER:PssConOpn:int} %{NUMBER:FailedConAtmpt:int} %{NUMBER:ConRstRcv:int} %{NUMBER:ConEstbl:int} %{NUMBER:PcktsRcv:int} %{NUMBER:PcktsSent:int} %{NUMBER:PcktsRetrnsmt:int} %{NUMBER:BadPcktsRcv:int} %{NUMBER:PcktsRstSent:int}"]

		# cpu log pattern
		match => [ "message", "%{SODADATE:logtime} %{DEVICE_NAME:dev} %{NUMBER:User:float} %{NUMBER:Sys:float} %{NUMBER:Idle:float} %{NUMBER:Wait:float} %{NUMBER:Nice:float} %{NUMBER:Combined:float} %{NUMBER:IRQ:float}" ]

		#memory
		match => [ "message", "%{SODADATE:logtime} %{DEVICE_NAME:dev} %{NUMBER:Mem_total:int} %{NUMBER:Mem_used:int} %{NUMBER:Mem_free:int} %{NUMBER:Swap_total:int} %{NUMBER:Swap_used:int} %{NUMBER:Swap_free:int}" ]

		# df log pattern
		match => [ "message", "%{SODADATE:logtime} DF-%{DEVICE_NAME:dev} %{NUMBER:Size:int} %{NUMBER:Used:int} %{NUMBER:Avail:int} %{NUMBER:Used_Perc:float}" ]

		#disk
		match => [ "message", "%{SODADATE:logtime} Disk-%{DEVICE_NAME:dev} %{NUMBER:R_in:int} %{NUMBER:W_out:int} %{NUMBER:Data_r:int} %{NUMBER:Data_w:int}" ]






			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
			# # # #                        Patterns for GC Logs                     # # # # 
			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

		# YngGnHpBfGC  : Young Generation Heap Used Before GC
		# YngGnHpAfGC  : Young Generation Heap Used After GC
		# YngGnHpCln   : Young Generation Heap That Was Cleaned Up by GC
		# OldGnHpBfGC  : Old Generation Heap Used Before GC
		# OldGnHpAfGC  : Old Generation Heap Used After GC
		# OldGnHpCln   : Old Generation Heap That Was Cleaned UP by GC
		# HpUsgBfGC    = YngGnHpBfGC + OldGnHpBfGC
		# HpUsgAfGC    = YngGnHpAfGC + OldGnHpAfGC
		# HpUsgCln     = YngGnHpCln + OldGnHpCln
		# PermGnHpBfGC : Permanent Generation Heap Used Before GC
		# PermGnHpAfGC : Permanent Generation Heap Used After GC
		# PermGnHpCln  : Permanent Generation Heap That Was Cleaned Up by GC
		# STWtime      : Stop The World Time
		

		# Full GC Pattern (this must come before GC pattern)
		match => ["message", "%{NUMBER:FullGCTime}: \[Full GC \[%{WORD}: %{NUMBER:YngGnHpBfGC:int}K->%{NUMBER:YngGnHpAfGC:int}K\(%{NUMBER:YngGnHpCln:int}K\)\] \[%{WORD}: %{NUMBER:OldGnHpBfGC:int}K->%{NUMBER:OldGnHpAfGC:int}K\(%{NUMBER:OldGnHpCln:int}K\)\] %{NUMBER:HpUsgBfGC:int}K->%{NUMBER:HpUsgAfGC:int}K\(%{NUMBER:HpUsgCln:int}K\) \[%{WORD}: %{NUMBER:PermGnHpBfGC:int}K->%{NUMBER:PermGnHpAfGC:int}K\(%{NUMBER:PermGnHpCln:int}K\)\], %{NUMBER:STWtime:float} secs\] \[Times: user=%{NUMBER} sys=%{NUMBER}, real=%{NUMBER} secs\]"]

		# GC Pattern
		match => ["message", "%{NUMBER:GCTime}: \[GC \[%{WORD}: %{NUMBER:YngGnHpBfGC:int}K->%{NUMBER:YngGnHpAfGC:int}K\(%{NUMBER:YngGnHpCln:int}K\)\] %{NUMBER:HpUsgBfGC:int}K->%{NUMBER:HpUsgAfGC:int}K\(%{NUMBER:HpUsgCln:int}K\), %{NUMBER:STWtime:float} secs\] \[Times: user=%{NUMBER} sys=%{NUMBER}, real=%{NUMBER} secs\]"]


# a samlple of Full GC log
# 466.186: [Full GC [PSYoungGen: 59505K->7020K(678976K)] [ParOldGen: 348666K->348592K(523200K)] 408172K->355613K(1202176K) [PSPermGen: 178109K->177862K(356288K)], 1.0111580 secs] [Times: user=6.85 sys=0.07, real=1.01 secs]
# 466.186					GC start time (in seconds from the beginning of the program or from the beginning of the day.
# [PSYoungGen: 59505K->7020K(678976K)] 		YoungGenHeapSizeBeforeGC -> YoungGenHeapSizeAfterGC (YoungGenHeapSizeThatWasCleanedUp) 	(Young = Eden+S0+S1)
# [ParOldGen: 348666K->348592K(523200K)] 	OldGenHeapSizeBeforeGC -> OldGenHeapSizeAfterGC (OldGenHeapSizeThatWasCleanedUp)	(Old = Tenure)
# 408172K->355613K(1202176K) 			HeapSize(of Young+Old)BeforeGC -> HeapSize(of Young+Old)AfterGC (HeapSize(of Young+Old)WasCleanUp)
# [PSPermGen: 178109K->177862K(356288K)], 	PermGenHeapSizeBeforeGC -> PermGenHeapSizeAfterGC (PermGenHeapSizeThatWasCleanedUp)	Permanent
# 1.0111580 secs] 				STWtime = Stop The World Time

# a sample of GC log
# 588.293: [GC [PSYoungGen: 655020K->9347K(722688K)] 1037458K->392508K(1245888K), 0.0246850 secs] [Times: user=0.16 sys=0.00, real=0.02 secs]
# 588.293					GC start time (in seconds from the beginning of the program or from the beginning of the day.
# [PSYoungGen: 655020K->9347K(722688K)] 	YoungGenHeapSizeBeforeGC -> YoungGenHeapSizeAfterGC (YoungGenHeapSizeThatWasCleanedUp) 	(Young = Eden+S0+S1)
# 1037458K->392508K(1245888K), 			HeapSize(of Young+Old)BeforeGC -> HeapSize(of Young+Old)AfterGC (HeapSize(of Young+Old)WasCleanUp)
# 0.0246850 secs]				STWtime = Stop The World Time









			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
			# # # #                     Patterns for Event Logs                     # # # # 
			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

		# OHP_EVENTTYPE can be: DATABASE_QUERY, INBOUND_MESSAGE, OUTBOUND_MESSAGE, WEB_SERVICE_REQUEST, WEB_SERVICE_CALL, WEB_REQUEST or SCALAR
		match => [ "message", "%{SODADATE:EndTime} \| END %{OHP_EVENTTYPE:EventType} \'%{NUMBER:ThreadID:int} %{THREAD_NAME:ThreadName}\' \'%{OHP_EVN_PARAM:Param}\' %{NUMBER:ReqProcTime:int}"]






			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
			# # # #                        Patterns for Access Logs                 # # # # 
			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

		#UAGS : User Agent String. it is used to grab all the chars sets that we don't want to include

		# Access Log pattern for Internet Explorer (contains keywords:  MSIE %{BROWSER_VERSION} ... WOW64 ... Trident)
		match => ["message", "%{IPV4} \[%{HTTPDATE:logtime}\] %{BASE16NUM:SessionID} \"%{WORD:ReqMethod} %{URIPATH:Uri}(%{URIPARAM:ReqPrm}*) HTTP/%{NUMBER}\" %{NUMBER:RespCode:int} %{NUMBER:ByteSent:int} %{NUMBER:ReqProcTime:int} %{THREAD_NAME:ThreadName} %{UAGS}MSIE %{BROWSER_VERSION:IEVersion}(%{UAGS}*)((WOW64)*)(%{UAGS}*)((Trident)*)"]

		# Access Log pattern for Firefox (contains keywords:  Firefox/%{BROWSER_VERSION})
		match => ["message", "%{IPV4} \[%{HTTPDATE:logtime}\] %{BASE16NUM:SessionID} \"%{WORD:ReqMethod} %{URIPATH:Uri}(%{URIPARAM:ReqPrm}*) HTTP/%{NUMBER}\" %{NUMBER:RespCode:int} %{NUMBER:ByteSent:int} %{NUMBER:ReqProcTime:int} %{THREAD_NAME:ThreadName} %{UAGS}Firefox/%{BROWSER_VERSION:FirefoxVersion}"]

		# Access Log pattern for Chrome     (contains keywords:  Chrome/%{BROWSER_VERSION} blah blah blah Safari/${BROWSER_VERSION})
 		match => ["message", "%{IPV4} \[%{HTTPDATE:logtime}\] %{BASE16NUM:SessionID} \"%{WORD:ReqMethod} %{URIPATH:Uri}(%{URIPARAM:ReqPrm}*) HTTP/%{NUMBER}\" %{NUMBER:RespCode:int} %{NUMBER:ByteSent:int} %{NUMBER:ReqProcTime:int} %{THREAD_NAME:ThreadName} %{UAGS}Chrome/%{BROWSER_VERSION:ChromeVersion}(%{UAGS}*)((Safari)*)"]

		# Access Log pattern for Safari (contains keywords:  Safari/%{BROWSER_VERSION}) 
		match => ["message", "%{IPV4} \[%{HTTPDATE:logtime}\] %{BASE16NUM:SessionID} \"%{WORD:ReqMethod} %{URIPATH:Uri}(%{URIPARAM:ReqPrm}*) HTTP/%{NUMBER}\" %{NUMBER:RespCode:int} %{NUMBER:ByteSent:int} %{NUMBER:ReqProcTime:int} %{THREAD_NAME:ThreadName} %{UAGS}Safari/%{BROWSER_VERSION:SafariVersion}"]

	} # grok ends here








			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
			# # # #                   Create Browswer fields for Access Logs                # # # # 
			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

			# dropping *version and make a unified Browser field
	if [SafariVersion] {
		mutate {
			add_field => {"Browser" => "Safari_v.%{SafariVersion}"}
			remove_field => ["SafariVersion"]
		}	
	}
	if [ChromeVersion] {
		mutate {
			add_field => {"Browser" => "Chrome_v.%{ChromeVersion}"}
			remove_field => ["ChromeVersion"]
		}	
	}
	if [FirefoxVersion] {
		mutate {
			add_field => {"Browser" => "Firefox_v.%{FirefoxVersion}"}
			remove_field => ["FirefoxVersion"]
		}	
	}
	if [IEVersion] {
		mutate {
			add_field => {"Browser" => "IE_v.%{IEVersion}"}
			remove_field => ["IEVersion"]
		}	
	}
	





			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
			# # # #                 Calculate timestamp and removing unneccessary fields for Event log                # # # # 
			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	# in Event log, we can get the EndTime
	# this ruby code, try to compute @timestamp for this log (this is the Start Time of the query)
	if [EndTime] {
		ruby {
			code => "
					event['EndTime'] = Time.parse(event['EndTime'])
					event['@timestamp'] = event['EndTime'] - event['ReqProcTime'].to_i
				"
		}
		mutate {
			remove_field => ["message", "@version"]
		}
	}








	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
	# # # #             Calculate timestamp and removing unneccessary fields for GC and FUllGC log            # # # # 
	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	if [GCTime] {
		ruby {
			code => "
					t = Time.now
					event['@timestamp'] = Time.new(t.year, t.month, t.day) + event['GCTime'].to_f
					event['GCType'] = 'GC'
				"
		}
		mutate {
			remove_field => ["GCTime", "message", "@version"]
		}
	}

	if [FullGCTime] {
		ruby {
			code => "
					t = Time.now
					event['@timestamp'] = Time.new(t.year, t.month, t.day) + event['FullGCTime'].to_f
					event['GCType'] = 'FullGC'
				"
		}
		mutate {
			remove_field => ["FullGCTime", "message", "@version"]
		}
	}











			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #  
			# # # #        Mutate timestampe and removing unnecessary fileds on System Logs       # # # # 
			# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

	# if the log can be matched to pattern
	if "_grokparsefailure" not in [tags]{
		date{
			match => ["logtime", "dd/MMM/YYYY-HH:mm:ss.SSS", "dd MMM YYYY HH:mm:ss.SSS","dd/MMM/YYYY-HH:mm:ss,SSS", "dd MMM YYYY HH:mm:ss,SSS", "dd/MMM/YYYY:HH:mm:ss Z", "dd MMM YYYY:HH:mm:ss Z", "YYYY-MM-dd'T'HH:mm:ss.SSSZ"]

			# logtime has been replaced by logstash's @timestamp instead. so, its safe to remove
			# message has been broken down by regex. so, its a wast to keep it. 
			remove_field => ["logtime", "message", "@version"]
		
			# should we remove the host field?
	
			# set timezone to UTC (+00:00), in order to prevent Grok to offset the given logtime 
			timezone => "UTC"

		}

	# if the log cannot be matched to pattern
	} else {
		mutate {  
			remove_field => ["@version", "tags"]
		}
	}










	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
	# because, Kibana doesn't allow to plot multiple fields in a single chart. so, we break each field into each event with value and type.   #
	# so, we can plot mulitple events with value and query by type                                                                            #
	# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
	
	#clone Process log
	if [PID]{
		sodaclone{
			clones => ["PID", "UsrName", "OwnrGrp", "Start", "CpuSysTime", "CpuUsrTime", "CpuUsg", "State", "NumActiveThreads", "Priority", "Nice", "SharedMem", "RssMem", "VirtualMem", "NonIOpgFaults", "IOpgFaults", "TotalPgFaults"]
		}
	}
	
	
	# clone Network log
	if [ActConOpn] {
		sodaclone{
			clones => ["ActConOpn", "PssConOpn", "FailedConAtmpt", "ConRstRcv", "ConEstbl", "PcktsRcv", "PcktsSent", "PcktsRetrnsmt", "BadPcktsRcv", "PcktsRstSent"]
		}
	}
	
	# clone CPU log
	if [User] and [Idle] {
		sodaclone{
			clones => ["User", "Sys", "Idle", "Wait", "Nice", "Combined", "IRQ"]
		}
	}

	# clone Memory log
	if [Mem_total] {
		sodaclone{
			clones => ["Mem_total", "Mem_used", "Mem_free", "Swap_total", "Swap_used", "Swap_free"]
		}
	}

	# clone Df
	if [Used] and [Avail]{
		sodaclone{
			clones => ["Size", "Used", "Avail", "Used_Perc"]
		}
	}

	# clone Disk log
	if [R_in] {
		sodaclone{
			clones => ["R_in", "W_out", "Data_r", "Data_w"]
		}
		
	}
	

	
	
	# clone Full GC log
	if [YngGnHpAfGC] and [PermGnHpAfGC] {
		sodaclone{
			clones => ["YngGnHpBfGC", "YngGnHpAfGC", "YngGnHpCln", "OldGnHpBfGC", "OldGnHpAfGC", "OldGnHpCln", "HpUsgBfGC", "HpUsgAfGC", "HpUsgCln", "PermGnHpBfGC", "PermGnHpAfGC", "PermGnHpCln", "STWtime"]
		}
	}

	# clone GC log
	if [YngGnHpAfGC] and ![PermGnHpAfGC]{
		sodaclone{
			clones => ["YngGnHpBfGC", "YngGnHpAfGC", "YngGnHpCln", "HpUsgBfGC", "HpUsgAfGC", "HpUsgCln", "STWtime"]
		}
	}
	
	
	
	# clone Orion's Event Log
	if [EventType] and [Param] and [ReqProcTime] {
		sodaclone{
			clones => ["EventType", "ThreadID", "ThreadName", "Param", "ReqProcTime"]
		}
	}
	
	
	
	# clone Access log
	if [SessionID] {
		sodaclone{
			clones =>["SessionID", "ReqMethod", "Uri", "ReqPrm", "RespCode", "ByteSent", "ReqProcTime", "ThreadName", "Browser"]
		}
	}
 

} #Filter ends here

output {
	elasticsearch { host => localhost }
	stdout { codec => rubydebug }
}
